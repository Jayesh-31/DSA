/* Leet-> 34.Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.
If target is not found in the array, return [-1, -1].
You must write an algorithm with O(log n) runtime complexity. */

// Binary Search

import java.util.*;
public class Main
{
	public static void main(String[] args) {
		int[] ar = {5,7,7,8,8,10};
		int n = ar.length;
		int tar = 7;
		int[] nums = binSer(ar,n,tar);
		System.out.println(Arrays.toString(nums));
	}
	
	public static int[] binSer(int[] ar, int n, int tar){
	    int s = 0, e = n-1, m;
	    int[] nums = {-1,-1};
	    
	    while(s<=e){
	        m = s+(e-s)/2;
	        if(ar[m] == tar && ar[m+1] == tar){
	            nums[0] = m;
	            nums[1] = m+1;
	            return nums;
	        }
	        if(ar[m] == tar && ar[m-1] == tar){
	            nums[1] = m;
	            nums[0] = m-1;
	            return nums;
	        }
	        if(ar[m] < tar){
	            s = m+1;
	        }
	        if(ar[m] > tar){
	            e = m-1;
	        }
	    }
	    return nums;
	}
}
